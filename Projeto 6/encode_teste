#importe as bibliotecas
from suaBibSignal import *
import numpy as np
import sounddevice as sd
import matplotlib.pyplot as plt
from scipy import signal
from scipy.fftpack import fft, fftshift

# Converte a intensidade em decibéis, caso queira usá-la para representar o nível de intensidade do sinal.
def todB(s):
    sdB = 10*np.log10(s)
    return(sdB)

# Função para gerar uma senoide, com frequência (freq), tempo de duração (time) e taxa de amostragem (fs)
def generateSin(freq, time, fs):
    n = time*fs  # número de pontos da senoide
    x = np.linspace(0.0, time, n)  # cria o vetor de tempo (x)
    s = np.sin(freq*x*2*np.pi)  # cria a senoide para a frequência dada
    return (x, s)

# Função para calcular a Transformada de Fourier de um sinal
def calcFFT(signal, fs):
    # O número de amostras no sinal
    N  = len(signal)
    T  = 1/fs  # intervalo de tempo entre amostras
    xf = np.linspace(-1.0/(2.0*T), 1.0/(2.0*T), N)  # cria eixo de frequências
    yf = fft(signal)  # executa a Transformada Rápida de Fourier
    return(xf, fftshift(yf))  # fftshift reorganiza a FFT para visualização simétrica

# Frequências DTMF, associando teclas a pares de frequências (ex.: tecla '1' tem as frequências 679 Hz e 1209 Hz)
dtmf_frequencies = {
    '1': (679, 1209),
    '2': (679, 1336),
    '3': (679, 1477),
    '4': (770, 1209),
    '5': (770, 1336),
    '6': (770, 1477),
    '7': (825, 1209),
    '8': (825, 1336),
    '9': (825, 1477),
    '0': (941, 1336),
    '*': (941, 1209),
    '#': (941, 1477),
    'A': (679,1633),
    'B': (770,1633),
    'C': (825,1633),
    'D': (941,1633),
}

# Função para pegar as frequências associadas à tecla pressionada
def take_frequence(tecla):
    freq = dtmf_frequencies[str(tecla)]  # obtem as duas frequências associadas à tecla
    return freq

def main():
    
    print("Inicializando encoder")
    print("Aguardando usuário")

    # Solicita que o usuário digite uma tecla DTMF. Repete até obter uma tecla válida.
    tecla = input("Digite uma tecla do teclado numérico DTMF: ")
    while tecla not in dtmf_frequencies.keys():
        tecla = input("Insira uma tecla do teclado numérico DTMF: ")
    
    # Obtém as duas frequências associadas à tecla pressionada
    frequencias = take_frequence(tecla)
    print(f'Frequências desejadas: {frequencias}')

    fs  = 44100  # taxa de amostragem em pontos por segundo
    T   = 4  # duração do sinal em segundos
    t   = np.linspace(-T/2, T/2, T*fs)  # cria um vetor de tempo com duração T
    
    sinais = []

    # Gera uma senoide para cada uma das duas frequências da tecla
    for frequencia in frequencias:
        x, y = generateSin(frequencia, T, fs)  # gera a senoide
        plt.figure(figsize=(10, 4))
        plt.plot(t[:1000], y[:1000])  # plota apenas 1000 pontos para visualização
        plt.title('Sinal DTMF no Domínio do Tempo')
        plt.xlabel('Tempo (s)')
        plt.ylabel('Amplitude')
        sinais.append(y)  # armazena o sinal gerado em uma lista

    # Soma as duas senoides para obter o tom DTMF
    senos_somados = sinais[0] + sinais[1]
    plt.figure(figsize=(10, 4))
    plt.plot(t[:1000], senos_somados[:1000])  # exibe apenas alguns pontos para visualização
    plt.title('Sinais somados')
    plt.xlabel('Tempo (s)')
    plt.ylabel('Amplitude')
    
    # Exibe o espectro do sinal somado no domínio da frequência
    plt.figure()
    plt.magnitude_spectrum(senos_somados, Fs=fs)
    plt.title('Sinal DTMF no Domínio da Frequência')
    plt.xlabel('Frequência [Hz]')
    plt.ylabel('Magnitude')

    tone = senos_somados  # define o tom DTMF a ser emitido

    print("Gerando Tons base")
    print("Executando as senoides (emitindo o som)")
    print("Gerando Tom referente ao símbolo : {}".format(tecla))
    sd.play(tone, fs)  # emite o tom DTMF gerado pelo sistema de som
    sd.wait()  # aguarda o término do áudio para seguir o código

    plt.show()  # exibe todos os gráficos gerados

if __name__ == "__main__":
    main()
